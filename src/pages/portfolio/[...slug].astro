---
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { imageLoader } from "../../components/imageLoader";

export async function getStaticPaths() {
  const portfolioEntries = await getCollection("portfolio");

  return portfolioEntries.map((entry) => ({
    params: { slug: entry.data.permalink },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();
---

<Layout title={`${entry.data.title} - Portfolio`}>
  <article class="container mx-auto px-4 py-20">
    <div class="">
      <header class="mb-12">
        <div class="max-w-61xl mx-auto">
          <h1
            class="text-6xl font-basement bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent animate-gradient mb-6"
          >
            {entry.data.title}
          </h1>
          <div class="flex items-center gap-4 mb-8">
            <img
              src={imageLoader(entry.data.permalink, entry.data.logo[0])}
              alt={`${entry.data.title} logo`}
              class="w-16"
            />

            <div>
              <p class="text-xl text-primary">{entry.data.tagline}</p>
              <p class="text-gray-300">{entry.data.port_date}</p>
            </div>
            {
              entry.data.case_link_url[0] ? (
                <div class="ml-auto">
                  <a
                    href={entry.data.case_link_url[0]}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="inline-block bg-primary text-dark font-basement px-8 py-4 rounded-lg hover:bg-white transition-colors"
                  >
                    Visit Website
                  </a>
                </div>
              ) : null
            }
          </div>
        </div>

        <img
          src={imageLoader(
            entry.data.permalink,
            entry.data.background_image[0]
          )}
          alt={entry.data.title}
          class="w-full aspect-video object-cover rounded-lg"
        />
        <div class="mt-8">
          <div class="flex mb-8 gap-5">
            <div class="flex flex-col gap-3 w-1/3">
              <h3 class="font-basement text-primary">Role</h3>
              <div>
                {
                  entry.data.category.map((cat) => (
                    <span class="mr-3 mb-3 inline-block px-3 py-1 bg-primary/20 text-primary text-sm clip2 border-l-2 border-primary/30 hover:border-primary transition-all">
                      {cat}
                    </span>
                  ))
                }
              </div>
            </div>

            <div class="flex flex-col gap-3 w-1/3">
              <h3 class="font-basement text-purple-500">Tech</h3>
              <div>
                {
                  entry.data.tag.map((cat) => (
                    <span class="mr-3 mb-3 inline-block px-3 py-1 bg-purple-500/15 text-purple-500 text-sm clip2 border-l-2 border-purple-500/30  hover:border-secondary transition-all">
                      {cat}
                    </span>
                  ))
                }
              </div>
            </div>

            {
              entry.data.agancy === "" ? null : (
                <div class="flex flex-col gap-3 w-1/3">
                  <h3 class="font-basement text-tertiary uppercase">Agancy</h3>
                  <div>
                    <span class="px-3 py-1 bg-tertiary/20 text-tertiary text-sm inline-block clip2  border-l-2 border-tertiary/30  hover:border-tertiary transition-all">
                      {entry.data.agancy}
                    </span>
                  </div>
                </div>
              )
            }
          </div>
          <hr class="border-purple-500/20" />
        </div>
      </header>

      <div class="max-w-4xl mx-auto">
        <div class="prose prose-invert max-w-none">
          <Content />
        </div>

        {
          entry.data.bilder && (
            <div class="mt-12 grid md:grid-cols-2 gap-8">
              {entry.data.bilder.map((img: string) => (
                <img
                  src={imageLoader(entry.data.permalink, img)}
                  alt={`${entry.data.title} screenshot`}
                  class="rounded-lg"
                />
              ))}
            </div>
          )
        }
      </div>
    </div>
  </article>
</Layout>
